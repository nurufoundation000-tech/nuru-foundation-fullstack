
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  passwordHash: 'passwordHash',
  fullName: 'fullName',
  bio: 'bio',
  profilePicUrl: 'profilePicUrl',
  roleId: 'roleId',
  dateJoined: 'dateJoined',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.CourseScalarFieldEnum = {
  id: 'id',
  tutorId: 'tutorId',
  title: 'title',
  description: 'description',
  category: 'category',
  level: 'level',
  thumbnailUrl: 'thumbnailUrl',
  isPublished: 'isPublished',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LessonScalarFieldEnum = {
  id: 'id',
  courseId: 'courseId',
  title: 'title',
  content: 'content',
  videoUrl: 'videoUrl',
  orderIndex: 'orderIndex',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EnrollmentScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  courseId: 'courseId',
  enrolledAt: 'enrolledAt',
  progress: 'progress'
};

exports.Prisma.AssignmentScalarFieldEnum = {
  id: 'id',
  lessonId: 'lessonId',
  title: 'title',
  description: 'description',
  maxScore: 'maxScore'
};

exports.Prisma.SubmissionScalarFieldEnum = {
  id: 'id',
  assignmentId: 'assignmentId',
  studentId: 'studentId',
  codeSubmission: 'codeSubmission',
  grade: 'grade',
  feedback: 'feedback',
  submittedAt: 'submittedAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LessonProgressScalarFieldEnum = {
  id: 'id',
  enrollmentId: 'enrollmentId',
  lessonId: 'lessonId',
  isCompleted: 'isCompleted',
  completedAt: 'completedAt'
};

exports.Prisma.ModerationLogScalarFieldEnum = {
  id: 'id',
  moderatorId: 'moderatorId',
  action: 'action',
  targetUserId: 'targetUserId',
  targetCourseId: 'targetCourseId',
  details: 'details',
  createdAt: 'createdAt'
};

exports.Prisma.AdminActionScalarFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  actionType: 'actionType',
  description: 'description',
  createdAt: 'createdAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  courseId: 'courseId',
  amount: 'amount',
  status: 'status',
  paymentDate: 'paymentDate',
  providerRef: 'providerRef'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  senderId: 'senderId',
  receiverId: 'receiverId',
  message: 'message',
  sentAt: 'sentAt',
  isRead: 'isRead'
};

exports.Prisma.ForumPostScalarFieldEnum = {
  id: 'id',
  authorId: 'authorId',
  courseId: 'courseId',
  title: 'title',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ForumCommentScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  authorId: 'authorId',
  content: 'content',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  body: 'body',
  isRead: 'isRead',
  createdAt: 'createdAt'
};

exports.Prisma.BadgeScalarFieldEnum = {
  id: 'id',
  key: 'key',
  title: 'title',
  description: 'description',
  createdAt: 'createdAt'
};

exports.Prisma.UserBadgeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  badgeId: 'badgeId',
  awardedAt: 'awardedAt'
};

exports.Prisma.CourseReviewScalarFieldEnum = {
  id: 'id',
  courseId: 'courseId',
  reviewerId: 'reviewerId',
  rating: 'rating',
  comment: 'comment',
  createdAt: 'createdAt'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.CourseTagScalarFieldEnum = {
  id: 'id',
  courseId: 'courseId',
  tagId: 'tagId'
};

exports.Prisma.CourseNoteScalarFieldEnum = {
  id: 'id',
  courseId: 'courseId',
  tutorId: 'tutorId',
  title: 'title',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OAuthAccountScalarFieldEnum = {
  id: 'id',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  userId: 'userId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  expiresAt: 'expiresAt',
  scope: 'scope',
  tokenType: 'tokenType'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  Role: 'Role',
  Course: 'Course',
  Lesson: 'Lesson',
  Enrollment: 'Enrollment',
  Assignment: 'Assignment',
  Submission: 'Submission',
  LessonProgress: 'LessonProgress',
  ModerationLog: 'ModerationLog',
  AdminAction: 'AdminAction',
  Payment: 'Payment',
  Message: 'Message',
  ForumPost: 'ForumPost',
  ForumComment: 'ForumComment',
  Notification: 'Notification',
  Badge: 'Badge',
  UserBadge: 'UserBadge',
  CourseReview: 'CourseReview',
  Tag: 'Tag',
  CourseTag: 'CourseTag',
  CourseNote: 'CourseNote',
  OAuthAccount: 'OAuthAccount'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "D:\\NuruFoundation\\node_modules\\@prisma\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      },
      {
        "fromEnvVar": null,
        "value": "rhel-openssl-3.0.x"
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "D:\\NuruFoundation\\prisma\\schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.18.0",
  "engineVersion": "34b5a692b7bd79939a9a2c3ef97d816e749cda2f",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider      = \"prisma-client-js\"\n  binaryTargets = [\"native\", \"rhel-openssl-3.0.x\"]\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id                        Int             @id @default(autoincrement())\n  username                  String          @unique\n  email                     String          @unique\n  passwordHash              String\n  fullName                  String?\n  bio                       String?\n  profilePicUrl             String?\n  roleId                    Int?\n  dateJoined                DateTime        @default(now())\n  isActive                  Boolean         @default(true)\n  createdAt                 DateTime        @default(now())\n  updatedAt                 DateTime        @updatedAt\n  adminActions              AdminAction[]   @relation(\"UserAdminActions\")\n  courseReviews             CourseReview[]  @relation(\"UserCourseReviews\")\n  courses                   Course[]        @relation(\"TutorCourses\")\n  courseNotes               CourseNote[]\n  enrollments               Enrollment[]\n  forumComments             ForumComment[]\n  forumPosts                ForumPost[]\n  receivedMessages          Message[]       @relation(\"ReceivedMessages\")\n  sentMessages              Message[]       @relation(\"SentMessages\")\n  moderationLogsAsModerator ModerationLog[] @relation(\"ModeratorLogs\")\n  moderationLogsAsTarget    ModerationLog[] @relation(\"TargetUserLogs\")\n  notifications             Notification[]\n  oauthAccounts             OAuthAccount[]\n  payments                  Payment[]       @relation(\"UserPayments\")\n  submissions               Submission[]\n  userBadges                UserBadge[]\n  role                      Role?           @relation(\"UserRole\", fields: [roleId], references: [id])\n\n  @@map(\"users\")\n}\n\nmodel Role {\n  id    Int    @id @default(autoincrement())\n  name  String @unique\n  users User[] @relation(\"UserRole\")\n\n  @@map(\"roles\")\n}\n\nmodel Course {\n  id             Int             @id @default(autoincrement())\n  tutorId        Int\n  title          String\n  description    String?\n  category       String?\n  level          String?\n  thumbnailUrl   String?\n  isPublished    Boolean         @default(false)\n  createdAt      DateTime        @default(now())\n  updatedAt      DateTime        @updatedAt\n  courseReviews  CourseReview[]\n  courseTags     CourseTag[]\n  courseNotes    CourseNote[]\n  tutor          User            @relation(\"TutorCourses\", fields: [tutorId], references: [id], onDelete: Cascade)\n  enrollments    Enrollment[]\n  forumPosts     ForumPost[]\n  lessons        Lesson[]\n  moderationLogs ModerationLog[] @relation(\"CourseModerationLogs\")\n  payments       Payment[]\n\n  @@index([tutorId])\n  @@map(\"courses\")\n}\n\nmodel Lesson {\n  id             Int              @id @default(autoincrement())\n  courseId       Int\n  title          String\n  content        String?\n  videoUrl       String?\n  orderIndex     Int?\n  createdAt      DateTime         @default(now())\n  updatedAt      DateTime         @updatedAt\n  assignments    Assignment[]\n  course         Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)\n  lessonProgress LessonProgress[]\n\n  @@index([courseId, orderIndex])\n  @@map(\"lessons\")\n}\n\nmodel Enrollment {\n  id             Int              @id @default(autoincrement())\n  studentId      Int\n  courseId       Int\n  enrolledAt     DateTime         @default(now())\n  progress       Float            @default(0.0)\n  course         Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)\n  student        User             @relation(fields: [studentId], references: [id], onDelete: Cascade)\n  lessonProgress LessonProgress[]\n\n  @@unique([studentId, courseId])\n  @@index([studentId])\n  @@index([courseId])\n  @@map(\"enrollments\")\n}\n\nmodel Assignment {\n  id          Int          @id @default(autoincrement())\n  lessonId    Int\n  title       String?\n  description String?\n  maxScore    Int          @default(100)\n  lesson      Lesson       @relation(fields: [lessonId], references: [id], onDelete: Cascade)\n  submissions Submission[]\n\n  @@index([lessonId])\n  @@map(\"assignments\")\n}\n\nmodel Submission {\n  id             Int        @id @default(autoincrement())\n  assignmentId   Int\n  studentId      Int\n  codeSubmission String?\n  grade          Int?\n  feedback       String?\n  submittedAt    DateTime   @default(now())\n  updatedAt      DateTime   @updatedAt\n  assignment     Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)\n  student        User       @relation(fields: [studentId], references: [id], onDelete: Cascade)\n\n  @@index([assignmentId])\n  @@index([studentId])\n  @@map(\"submissions\")\n}\n\nmodel LessonProgress {\n  id           Int        @id @default(autoincrement())\n  enrollmentId Int\n  lessonId     Int\n  isCompleted  Boolean    @default(false)\n  completedAt  DateTime?\n  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)\n  lesson       Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)\n\n  @@unique([enrollmentId, lessonId])\n  @@index([enrollmentId])\n  @@index([lessonId])\n  @@map(\"lesson_progress\")\n}\n\nmodel ModerationLog {\n  id             Int      @id @default(autoincrement())\n  moderatorId    Int\n  action         String\n  targetUserId   Int?\n  targetCourseId Int?\n  details        String?\n  createdAt      DateTime @default(now())\n  moderator      User     @relation(\"ModeratorLogs\", fields: [moderatorId], references: [id], onDelete: Cascade)\n  targetCourse   Course?  @relation(\"CourseModerationLogs\", fields: [targetCourseId], references: [id])\n  targetUser     User?    @relation(\"TargetUserLogs\", fields: [targetUserId], references: [id])\n\n  @@index([moderatorId])\n  @@index([targetUserId])\n  @@map(\"moderation_logs\")\n}\n\nmodel AdminAction {\n  id          Int      @id @default(autoincrement())\n  adminId     Int\n  actionType  String\n  description String?\n  createdAt   DateTime @default(now())\n  admin       User     @relation(\"UserAdminActions\", fields: [adminId], references: [id], onDelete: Cascade)\n\n  @@index([adminId])\n  @@map(\"admin_actions\")\n}\n\nmodel Payment {\n  id          Int      @id @default(autoincrement())\n  studentId   Int\n  courseId    Int?\n  amount      Decimal  @db.Decimal(10, 2)\n  status      String\n  paymentDate DateTime @default(now())\n  providerRef String?\n  course      Course?  @relation(fields: [courseId], references: [id])\n  student     User     @relation(\"UserPayments\", fields: [studentId], references: [id], onDelete: Cascade)\n\n  @@index([studentId])\n  @@index([courseId])\n  @@map(\"payments\")\n}\n\nmodel Message {\n  id         Int      @id @default(autoincrement())\n  senderId   Int\n  receiverId Int\n  message    String\n  sentAt     DateTime @default(now())\n  isRead     Boolean  @default(false)\n  receiver   User     @relation(\"ReceivedMessages\", fields: [receiverId], references: [id], onDelete: Cascade)\n  sender     User     @relation(\"SentMessages\", fields: [senderId], references: [id], onDelete: Cascade)\n\n  @@index([senderId])\n  @@index([receiverId])\n  @@map(\"messages\")\n}\n\nmodel ForumPost {\n  id        Int            @id @default(autoincrement())\n  authorId  Int\n  courseId  Int?\n  title     String?\n  content   String\n  createdAt DateTime       @default(now())\n  updatedAt DateTime       @updatedAt\n  comments  ForumComment[]\n  author    User           @relation(fields: [authorId], references: [id], onDelete: Cascade)\n  course    Course?        @relation(fields: [courseId], references: [id])\n\n  @@index([authorId])\n  @@index([courseId])\n  @@map(\"forum_posts\")\n}\n\nmodel ForumComment {\n  id        Int       @id @default(autoincrement())\n  postId    Int\n  authorId  Int\n  content   String\n  createdAt DateTime  @default(now())\n  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)\n  post      ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)\n\n  @@index([postId])\n  @@index([authorId])\n  @@map(\"forum_comments\")\n}\n\nmodel Notification {\n  id        Int      @id @default(autoincrement())\n  userId    Int\n  title     String\n  body      String?\n  isRead    Boolean  @default(false)\n  createdAt DateTime @default(now())\n  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@index([userId])\n  @@map(\"notifications\")\n}\n\nmodel Badge {\n  id          Int         @id @default(autoincrement())\n  key         String      @unique\n  title       String\n  description String?\n  createdAt   DateTime    @default(now())\n  userBadges  UserBadge[]\n\n  @@map(\"badges\")\n}\n\nmodel UserBadge {\n  id        Int      @id @default(autoincrement())\n  userId    Int\n  badgeId   Int\n  awardedAt DateTime @default(now())\n  badge     Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)\n  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([userId, badgeId])\n  @@map(\"user_badges\")\n}\n\nmodel CourseReview {\n  id         Int      @id @default(autoincrement())\n  courseId   Int\n  reviewerId Int\n  rating     Int\n  comment    String?\n  createdAt  DateTime @default(now())\n  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)\n  reviewer   User     @relation(\"UserCourseReviews\", fields: [reviewerId], references: [id], onDelete: Cascade)\n\n  @@unique([courseId, reviewerId])\n  @@map(\"course_reviews\")\n}\n\nmodel Tag {\n  id      Int         @id @default(autoincrement())\n  name    String      @unique\n  courses CourseTag[]\n\n  @@map(\"tags\")\n}\n\nmodel CourseTag {\n  id       Int    @id @default(autoincrement())\n  courseId Int\n  tagId    Int\n  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)\n  tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)\n\n  @@unique([courseId, tagId])\n  @@map(\"course_tags\")\n}\n\n/// ** Course Notes for tutors to communicate with students **\nmodel CourseNote {\n  id        Int      @id @default(autoincrement())\n  courseId  Int\n  tutorId   Int\n  title     String\n  content   String\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)\n  tutor     User     @relation(fields: [tutorId], references: [id], onDelete: Cascade)\n\n  @@index([courseId])\n  @@index([tutorId])\n  @@map(\"course_notes\")\n}\n\n/// ** OAuth / Social login accounts **\nmodel OAuthAccount {\n  id                Int     @id @default(autoincrement())\n  provider          String\n  providerAccountId String\n  userId            Int\n  accessToken       String?\n  refreshToken      String?\n  expiresAt         Int?\n  scope             String?\n  tokenType         String?\n  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([provider, providerAccountId])\n  @@map(\"oauth_accounts\")\n}\n",
  "inlineSchemaHash": "08a1fe8a7f9ec28cc37c2f15515d22369c5a831076651e3a8a7e66a04ffa172a",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"passwordHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fullName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bio\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"profilePicUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"roleId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"dateJoined\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"adminActions\",\"kind\":\"object\",\"type\":\"AdminAction\",\"relationName\":\"UserAdminActions\"},{\"name\":\"courseReviews\",\"kind\":\"object\",\"type\":\"CourseReview\",\"relationName\":\"UserCourseReviews\"},{\"name\":\"courses\",\"kind\":\"object\",\"type\":\"Course\",\"relationName\":\"TutorCourses\"},{\"name\":\"courseNotes\",\"kind\":\"object\",\"type\":\"CourseNote\",\"relationName\":\"CourseNoteToUser\"},{\"name\":\"enrollments\",\"kind\":\"object\",\"type\":\"Enrollment\",\"relationName\":\"EnrollmentToUser\"},{\"name\":\"forumComments\",\"kind\":\"object\",\"type\":\"ForumComment\",\"relationName\":\"ForumCommentToUser\"},{\"name\":\"forumPosts\",\"kind\":\"object\",\"type\":\"ForumPost\",\"relationName\":\"ForumPostToUser\"},{\"name\":\"receivedMessages\",\"kind\":\"object\",\"type\":\"Message\",\"relationName\":\"ReceivedMessages\"},{\"name\":\"sentMessages\",\"kind\":\"object\",\"type\":\"Message\",\"relationName\":\"SentMessages\"},{\"name\":\"moderationLogsAsModerator\",\"kind\":\"object\",\"type\":\"ModerationLog\",\"relationName\":\"ModeratorLogs\"},{\"name\":\"moderationLogsAsTarget\",\"kind\":\"object\",\"type\":\"ModerationLog\",\"relationName\":\"TargetUserLogs\"},{\"name\":\"notifications\",\"kind\":\"object\",\"type\":\"Notification\",\"relationName\":\"NotificationToUser\"},{\"name\":\"oauthAccounts\",\"kind\":\"object\",\"type\":\"OAuthAccount\",\"relationName\":\"OAuthAccountToUser\"},{\"name\":\"payments\",\"kind\":\"object\",\"type\":\"Payment\",\"relationName\":\"UserPayments\"},{\"name\":\"submissions\",\"kind\":\"object\",\"type\":\"Submission\",\"relationName\":\"SubmissionToUser\"},{\"name\":\"userBadges\",\"kind\":\"object\",\"type\":\"UserBadge\",\"relationName\":\"UserToUserBadge\"},{\"name\":\"role\",\"kind\":\"object\",\"type\":\"Role\",\"relationName\":\"UserRole\"}],\"dbName\":\"users\"},\"Role\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"users\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserRole\"}],\"dbName\":\"roles\"},\"Course\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"tutorId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"level\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"thumbnailUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isPublished\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"courseReviews\",\"kind\":\"object\",\"type\":\"CourseReview\",\"relationName\":\"CourseToCourseReview\"},{\"name\":\"courseTags\",\"kind\":\"object\",\"type\":\"CourseTag\",\"relationName\":\"CourseToCourseTag\"},{\"name\":\"courseNotes\",\"kind\":\"object\",\"type\":\"CourseNote\",\"relationName\":\"CourseToCourseNote\"},{\"name\":\"tutor\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TutorCourses\"},{\"name\":\"enrollments\",\"kind\":\"object\",\"type\":\"Enrollment\",\"relationName\":\"CourseToEnrollment\"},{\"name\":\"forumPosts\",\"kind\":\"object\",\"type\":\"ForumPost\",\"relationName\":\"CourseToForumPost\"},{\"name\":\"lessons\",\"kind\":\"object\",\"type\":\"Lesson\",\"relationName\":\"CourseToLesson\"},{\"name\":\"moderationLogs\",\"kind\":\"object\",\"type\":\"ModerationLog\",\"relationName\":\"CourseModerationLogs\"},{\"name\":\"payments\",\"kind\":\"object\",\"type\":\"Payment\",\"relationName\":\"CourseToPayment\"}],\"dbName\":\"courses\"},\"Lesson\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"courseId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"videoUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"orderIndex\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"assignments\",\"kind\":\"object\",\"type\":\"Assignment\",\"relationName\":\"AssignmentToLesson\"},{\"name\":\"course\",\"kind\":\"object\",\"type\":\"Course\",\"relationName\":\"CourseToLesson\"},{\"name\":\"lessonProgress\",\"kind\":\"object\",\"type\":\"LessonProgress\",\"relationName\":\"LessonToLessonProgress\"}],\"dbName\":\"lessons\"},\"Enrollment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"courseId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"enrolledAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"progress\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"course\",\"kind\":\"object\",\"type\":\"Course\",\"relationName\":\"CourseToEnrollment\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"EnrollmentToUser\"},{\"name\":\"lessonProgress\",\"kind\":\"object\",\"type\":\"LessonProgress\",\"relationName\":\"EnrollmentToLessonProgress\"}],\"dbName\":\"enrollments\"},\"Assignment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"lessonId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"maxScore\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"lesson\",\"kind\":\"object\",\"type\":\"Lesson\",\"relationName\":\"AssignmentToLesson\"},{\"name\":\"submissions\",\"kind\":\"object\",\"type\":\"Submission\",\"relationName\":\"AssignmentToSubmission\"}],\"dbName\":\"assignments\"},\"Submission\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"assignmentId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"codeSubmission\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"grade\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"feedback\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"submittedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"assignment\",\"kind\":\"object\",\"type\":\"Assignment\",\"relationName\":\"AssignmentToSubmission\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SubmissionToUser\"}],\"dbName\":\"submissions\"},\"LessonProgress\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"enrollmentId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"lessonId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isCompleted\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"completedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"enrollment\",\"kind\":\"object\",\"type\":\"Enrollment\",\"relationName\":\"EnrollmentToLessonProgress\"},{\"name\":\"lesson\",\"kind\":\"object\",\"type\":\"Lesson\",\"relationName\":\"LessonToLessonProgress\"}],\"dbName\":\"lesson_progress\"},\"ModerationLog\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"moderatorId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"action\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"targetUserId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"targetCourseId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"details\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"moderator\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ModeratorLogs\"},{\"name\":\"targetCourse\",\"kind\":\"object\",\"type\":\"Course\",\"relationName\":\"CourseModerationLogs\"},{\"name\":\"targetUser\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TargetUserLogs\"}],\"dbName\":\"moderation_logs\"},\"AdminAction\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"adminId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"actionType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"admin\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserAdminActions\"}],\"dbName\":\"admin_actions\"},\"Payment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"courseId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"paymentDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"providerRef\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"course\",\"kind\":\"object\",\"type\":\"Course\",\"relationName\":\"CourseToPayment\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserPayments\"}],\"dbName\":\"payments\"},\"Message\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"senderId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"receiverId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"message\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sentAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isRead\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"receiver\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ReceivedMessages\"},{\"name\":\"sender\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SentMessages\"}],\"dbName\":\"messages\"},\"ForumPost\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"authorId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"courseId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"comments\",\"kind\":\"object\",\"type\":\"ForumComment\",\"relationName\":\"ForumCommentToForumPost\"},{\"name\":\"author\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ForumPostToUser\"},{\"name\":\"course\",\"kind\":\"object\",\"type\":\"Course\",\"relationName\":\"CourseToForumPost\"}],\"dbName\":\"forum_posts\"},\"ForumComment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"postId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"authorId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"author\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ForumCommentToUser\"},{\"name\":\"post\",\"kind\":\"object\",\"type\":\"ForumPost\",\"relationName\":\"ForumCommentToForumPost\"}],\"dbName\":\"forum_comments\"},\"Notification\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"body\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isRead\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"NotificationToUser\"}],\"dbName\":\"notifications\"},\"Badge\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"key\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"userBadges\",\"kind\":\"object\",\"type\":\"UserBadge\",\"relationName\":\"BadgeToUserBadge\"}],\"dbName\":\"badges\"},\"UserBadge\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"badgeId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"awardedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"badge\",\"kind\":\"object\",\"type\":\"Badge\",\"relationName\":\"BadgeToUserBadge\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToUserBadge\"}],\"dbName\":\"user_badges\"},\"CourseReview\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"courseId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"reviewerId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"rating\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"comment\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"course\",\"kind\":\"object\",\"type\":\"Course\",\"relationName\":\"CourseToCourseReview\"},{\"name\":\"reviewer\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserCourseReviews\"}],\"dbName\":\"course_reviews\"},\"Tag\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"courses\",\"kind\":\"object\",\"type\":\"CourseTag\",\"relationName\":\"CourseTagToTag\"}],\"dbName\":\"tags\"},\"CourseTag\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"courseId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"tagId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"course\",\"kind\":\"object\",\"type\":\"Course\",\"relationName\":\"CourseToCourseTag\"},{\"name\":\"tag\",\"kind\":\"object\",\"type\":\"Tag\",\"relationName\":\"CourseTagToTag\"}],\"dbName\":\"course_tags\"},\"CourseNote\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"courseId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"tutorId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"course\",\"kind\":\"object\",\"type\":\"Course\",\"relationName\":\"CourseToCourseNote\"},{\"name\":\"tutor\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CourseNoteToUser\"}],\"dbName\":\"course_notes\"},\"OAuthAccount\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"provider\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"providerAccountId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"accessToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"refreshToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"scope\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tokenType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"OAuthAccountToUser\"}],\"dbName\":\"oauth_accounts\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

